#! /usr/bin/env python
from glob import glob
from unittest import TestCase, skipIf
import json
import logging
import os

try:
    import jsonschema
except ImportError:
    jsonschema = None


SUITE_ROOT_DIR = os.path.join(os.path.dirname(__file__), os.pardir, "tests")

logging.basicConfig(level=logging.INFO)


def groups(paths):
    for path in paths:
        with open(path) as test_file:
            groups = json.load(test_file)
            for group in groups:
                yield group


def cases(paths):
    for test_group in groups(paths):
        for test in test_group["tests"]:
            test["schema"] = test_group["schema"]
            yield test


class SanityTests(TestCase):
    @classmethod
    def setUpClass(cls):
        test_glob = os.path.join(SUITE_ROOT_DIR, "*/*.json")
        logging.info("Looking for tests in %s", test_glob)
        cls.test_files = glob(test_glob)
        assert cls.test_files, "Didn't find the test files!"

    def test_all_files_are_valid_json(self):
        for test_path in self.test_files:
            with open(test_path) as test_file:
                json.load(test_file)

    @skipIf(jsonschema is None, "Validation library not present! Skipping.")
    def test_all_schemas_are_valid(self):
        for test_case in cases(self.test_files):
            # XXX: Add the other versions for the other drafts
            jsonschema.Draft3Validator.check_schema(test_case["schema"])

    def test_all_descriptions_are_unique(self):
        for group in groups(self.test_files):
            descriptions = {test["description"] for test in group["tests"]}
            self.assertEqual(len(descriptions), len(group["tests"]))


if __name__ == "__main__":
    from unittest import main
    main()
